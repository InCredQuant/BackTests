# -*- coding: utf-8 -*-
"""
Created on 10 Sep 2022

@author: Viren@InCred
"""

import re
import win32com.client 
import pandas
import datetime
import pdb
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
import time
import os
import sqlite3
from GetData import *

priceconn = GetConn('PriceData')

dbpath = "G:/Shared drives/BackTests/DB/"
LOGFILE = dbpath+'Logs/BSECalendar-log.ghb'
RESULTFILE = 'C:/Users/virendra.kumar_incre/Downloads/Results.csv'
#outlook = win32com.client.Dispatch("Outlook.Application")
#emailpath = dbpath+'Logs/BSEReports/bseResultsEmailList.xlsx'
'''
def EmailLookUP(emailpath):
    lookup = pandas.read_excel(emailpath, sheet_name = 0)
    lookup = lookup[['BSE','Email']]
    lookup.index = lookup['BSE']
    del lookup['BSE']
    return lookup
maillookup = EmailLookUP(emailpath)
'''


def RemovePreviousResultFile():
    if os.path.exists(RESULTFILE):
        os.remove(RESULTFILE)



       
def DownloadFile(RESULTFILE):
    url = 'http://www.bseindia.com/corporates/Forth_Results.aspx?expandable=3'
    options = webdriver.ChromeOptions()
    options.add_argument("--start-maximized")    
    driver = webdriver.Chrome('G:/Shared drives/BackTests/chromedriver.exe', chrome_options=options)
    driver.get(url)
    time.sleep(15)
    button = driver.find_element(By.XPATH, '//*[@id="lnkDownload"]')
    time.sleep(2)
    button.click()
    time.sleep(5)
    driver.close()
    return


def getIndicesConst(indicesList):
    allstocks = []
    for index in indicesList:
        indexComponents = GetComponentsForIndexForDateRange(priceconn, datetime.date.today()- datetime.timedelta(40), datetime.date.today(), index)
        [allstocks.extend(i) for i in indexComponents.values()]
    return list(set(allstocks))
    

def fileupdationMail(emails):
    outlook = win32com.client.Dispatch("Outlook.Application")
    mail = outlook.CreateItem(0)                  
    mail.To = '; '.join(emails)
    mail.Subject = 'BSE Results File Updated'
    mail.Body = 'BSE Results File is updated at location: "W:/bseResultslookup.csv" .\n\nThis is Auto Generated Mail.'
    try:
        mail.Send()
    except:
        print('Mail Sending Error')
    return

def CreateCalendar(EmailList, indata):
    if len(EmailList) > 0:
        outlook = win32com.client.Dispatch("Outlook.Application")
        appointment = outlook.CreateItem(1)
        appointment.MeetingStatus = 1
        for email in emaillist:
            appointment.Recipients.Add(email)        
        appointment.Subject = 'Result: '+ comp + ' ,' + resdate1#resdate.strftime("%A %d, %B %Y")
        appointment.Start = resdate2+ ' 08:30'
        appointment.Duration = 30
        appointment.Body = 'Result of ' + comp + ' announcement Date is ' + resdate1 + '.\n\nThis is Autogenerated Calendar.'
        appointment.ReminderMinutesBeforeStart = 0
        appointment.ResponseRequested = False
        appointment.AllDayEvent = False
        appointment.Send()
        print('Mailed: ', ind)


RemovePreviousResultFile()
DownloadFile(RESULTFILE)
indicesList = ['BSE100 INDEX', 'NSE100 INDEX']
lookupList = getIndicesConst(indicesList)
EmailList = ['rishi.kohli@incredalts.com', 'virendra.kumar@incredalts.com']


'''
def CleanHeader(textVar):
        pat = re.compile('\[|\%|\n|\.|\(|\)')
        textVar = re.sub(pat, '', textVar)
        return textVar
  
QuarterMonth = {4: 1, 5: 1, 6: 1, 7: 2, 8: 2, 9: 2, 10: 3, 11: 3, 12: 3, 1: 4, 2: 4, 3: 4}      
def CleanLogfile():
    f = open(LOGFILE,"r+")
    d = f.readlines()
    f.seek(0)
    for i in d:
        if QuarterMonth[datetime.datetime.strptime(i.rstrip().split('|')[2], '%Y-%m-%d').month] == QuarterMonth[datetime.datetime.now().month]:
            f.write(i)
    f.truncate()
    f.close()
    
def GetBSELookUp():
    conn = sqlite3.connect(dbpath+'backups/backtesting.db')
    curs = conn.cursor()
    query = "select Bloomberg, BSECode, CompanyName from ScripMaster where BSECode is not Null;"
    curs.execute(query)
    df = pandas.DataFrame(curs.fetchall())
    df.columns = [rec[0] for rec in curs.description]
    df.index = df['BSECode']
    del df['BSECode']
    df = df.dropna()
    df = df.groupby(level=0).last()
    df['Bloomberg']  = [i+ ' Equity' for i in df['Bloomberg']]
    curs.close()
    conn.close()
    return df

monthTable = {1: 12, 2: 12, 3: 12, 4: 3, 5: 3, 6: 3, 7: 6, 8: 6, 9: 6, 10: 9, 11: 9, 12: 9}

def PutResultFile(RESULTFILE):
    #if not os.path.exists(RESULTFILE):
    #    DownloadFile(RESULTFILE)
    result = pandas.read_csv(RESULTFILE)
    result.index = result['Security Code']
    del result['Security Code']
    #lookup = GetBSELookUp()
    #lookup = lookup[lookup.index.isin(result.index)]
    #lookup = lookup.ix[result.index]
    #lookup = lookup.groupby(level=0).last()
    #result = result.groupby(level=0).last() 
    #result = pandas.concat([result, lookup], axis = 1)
    result = result[['Security Name','Result Date']]#, 'Bloomberg', 'Result Date']]
    result = result.dropna()
    #result['Bloomberg'] = [i+' Equity' for i in result['Bloomberg']]
    lookupfile = dbpath+'Logs/BSEReports/bseResultslookup.csv'
    if os.path.exists(lookupfile):
        temp = pandas.read_csv(lookupfile)
        temp.index = temp['BSE']
        del temp['BSE']
        dateList = []
        for oneDate in temp['Result Date'].dropna():
            try:
                dateList.append(datetime.datetime.strptime(oneDate, '%d %b %Y').date())
            except:
                try:
                    dateList.append(datetime.datetime.strptime(oneDate, '%d-%b-%y').date())                    
                except:
                    dateList.append(datetime.datetime(1990, 1, 1).date())
        temp['Date'] = dateList
            
        #temp['Date'] = [datetime.datetime.strptime(i, '%d-%b-%y') for i in temp['Result Date'].dropna()]
        todayDate = datetime.datetime.now().date()
        cutoffMonth = monthTable[todayDate.month]
        if cutoffMonth == 12:
            cutoffDate = datetime.datetime(todayDate.year -1, cutoffMonth, 31).date()
        else:
            cutoffDate = datetime.datetime(todayDate.year, cutoffMonth+1, 1).date()-datetime.timedelta(1)
        temp = temp[temp['Date']> cutoffDate]
        del temp['Date']
        if len(temp)>0:
            result = pandas.concat([result, temp], axis = 0)
    result = result.groupby(level=0).last()
    result.index.name = 'BSE'
    try:
        result.to_csv(lookupfile)
        print('Lookup File Updated')
    except:
        print('File Writing Error')
    return


    
def Calendar(maillookup):
    result = pandas.read_csv(RESULTFILE)
    result.index = result['Security Code']
    del result['Security Code']
    #tempresult = result[result.index.isin(set.intersection(set(result.index), set(maillookup.index)))]
    #tempresult = tempresult.groupby(level=0).last()
    CleanLogfile()
    lfile = open(LOGFILE, 'r')
    logarray = [line.rstrip().split('|') for line in lfile.readlines()]
    lfile.close()
    logdict = {}
    for ar in logarray:
        logdict[ar[0], ar[1]] = ar[2]
    
#    tempresult = tempresult[tempresult['Result Date'] == datetime.datetime.now().date().strftime('%Y-%m-%d')]
    for ind in result.index:
        resdate = result.loc[ind].loc['Result Date']
        try:
            resdate1 = resdate.strftime("%A %d, %B %Y")
            resdate2 = resdate.strftime('%Y-%m-%d')
        except:
            resdate1 = datetime.datetime.strptime(resdate, '%d %b %Y').strftime("%A %d, %B %Y")
            resdate2 = datetime.datetime.strptime(resdate, '%d %b %Y').strftime('%Y-%m-%d')
        comp = CleanHeader(tempresult.loc[ind].loc['Company name'])
        try:
            emails = maillookup.loc[ind].loc['Email'].split(';')
        except:
            pdb.set_trace()
        emaillist = []
        for email in emails:
            try:
                temp = logdict[str(ind), email]
            except:
                temp = ''
            if temp != '':
                if logdict[str(ind), email] == resdate2:
                    continue
                else:
                    f = open(LOGFILE,"r+")
                    d = f.readlines()
                    f.seek(0)
                    for i in d:
                        if '%s|%s' %(i.rstrip().split('|')[0], i.rstrip().split('|')[1]) != '%s|%s' %(ind, email):
                            f.write(i)
                    f.truncate()
                    f.close()
            else:
                emaillist.append(email)
            with open(LOGFILE, 'a') as f:
                f.write('%s|%s|%s\n' %(ind, email, resdate2))
                #print 'Length Email: ', len(emaillist)
        
        if len(emaillist) > 0:
            appointment = outlook.CreateItem(1)
            appointment.MeetingStatus = 1
            for email in emaillist:
                appointment.Recipients.Add(email)        
            appointment.Subject = 'Result: '+ comp + ' ,' + resdate1#resdate.strftime("%A %d, %B %Y")
            appointment.Start = resdate2+ ' 08:30'
            appointment.Duration = 30
            appointment.Body = 'Result of ' + comp + ' announcement Date is ' + resdate1 + '.\n\nThis is Autogenerated Calendar.'
            appointment.ReminderMinutesBeforeStart = 0
            appointment.ResponseRequested = False
            appointment.AllDayEvent = False
            appointment.Send()
            print('Mailed: ', ind)
    return
        
   
#bsecode = [500101, 500067, 532443, 532210, 532772, 511072, 539844, 500469, 521016, 532612, 533329, 532705, 532209, 532926, 532889, 500294, 524558, 533179, 532527, 538562, 532409, 533200, 500420, 500480, 532482, 524804, 500182, 532488, 532500, 533269, 500253, 532187, 534309, 500008, 532281, 532540, 500034, 532548, 533573, 532296, 500049, 538962, 531795, 500820, 500570, 505200, 532343, 500104, 500875, 532134, 532648, 524715, 500144, 505537, 538567, 532424, 500425, 532938, 532940, 500180, 517334, 511196, 533228, 500209, 532215, 514043]
#emails = ['vishal.gajwani@birlasunlife.com','ashutosh.ojha@birlasunlife.com', 'natasha.lulla@birlasunlife.com', 'damodaran.kutty@birlasunlife.com']
#while True:    
#    hr = datetime.datetime.now().hour
#    if  hr == 9:

#url = 'http://www.bseindia.com/corporates/Forth_Results.aspx?expandable=3'
#RemovePreviousResultFile()
#DownloadFile(RESULTFILE)
print('Sleeping')
time.sleep(5)
PutResultFile(RESULTFILE)
#fileupdationMail(emails)
#Calendar(bsecode, emails)
Calendar(maillookup)
    
#print str(datetime.datetime.now())
#        time.sleep(4*60*60)
#    else:
#        time.sleep(30*60)


finalDF = pandas.DataFrame()
gg = indata.groupby('Scheme Name')
for grp in gg.groups.keys():
    temp = gg.get_group(grp)
    ff = temp.groupby('Month End')
    for tgrp in ff.groups.keys():
        dtemp = ff.get_group(tgrp)
        dtemp = dtemp[dtemp['Asset Type']== 'Equity']
        dtemp = dtemp.sort('Holding %', ascending = False)
        dtemp = dtemp[:10]
        finalDF = pandas.concat([finalDF, dtemp], axis= 0)
'''      