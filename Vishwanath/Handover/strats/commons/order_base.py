import datetime
from enum import Enum


class OptionType(Enum):
    CE = 1
    PE = 2


class Segment(Enum):
    EQ = 1
    FT = 2
    OP = 3


class Position(Enum):
    LONG = 1
    SHORT = -1


class Order:
    """
    Generic order class to create order instance
    """
    order_counter = 1

    def __init__(self) -> object:
        self._segment = None
        self._strategy_id = None
        self._order_id = Order.order_counter # Internally generated by class
        self._group_id = None
        self._symbol = None
        self._position = None
        self._entry_date = None
        self._entry_price = None
        self._exit_date = None
        self._exit_price = None
        self._quantity = None
        self._expiry_date = None
        self._option_type = None
        self._strike_price = None
        self._msg = None
        self._max_px = None
        self._min_px = None
        Order.order_counter += 1

    @property
    def segment(self):
        return self._segment

    @segment.setter
    def segment(self, value):
        self._segment = value.name

    @property
    def strategy_id(self):
        return self._strategy_id

    @strategy_id.setter
    def strategy_id(self, value):
        self._strategy_id = value

    @property
    def group_id(self):
        return self._group_id

    @group_id.setter
    def group_id(self, value):
        self._group_id = value

    @property
    def symbol(self):
        return self._symbol

    @symbol.setter
    def symbol(self, value):
        self._symbol = value

    @property
    def position(self):
        return self._position

    @position.setter
    def position(self, value):
        if not isinstance(value, Position):
            raise ValueError('Order position is not a position object.')
        self._position = value.name

    @property
    def entry_date(self):
        return self._entry_date

    @entry_date.setter
    def entry_date(self, value):
        if not isinstance(value, datetime.datetime):
            raise ValueError('Order entry date is not a datetime object.')
        self._entry_date = value

    @property
    def entry_price(self):
        return self._entry_price

    @entry_price.setter
    def entry_price(self, value):
        self._entry_price = value

    @property
    def exit_date(self):
        return self._exit_date

    @exit_date.setter
    def exit_date(self, value):
        if not isinstance(value, datetime.datetime):
            raise ValueError('Order exit date is not a datetime object.')
        self._exit_date = value

    @property
    def exit_price(self):
        return self._exit_price

    @exit_price.setter
    def exit_price(self, value):
        self._exit_price = value

    @property
    def quantity(self):
        return self._quantity

    @quantity.setter
    def quantity(self, value):
        if not isinstance(value, int):
            raise ValueError('Order quantity in not an int object.')
        self._quantity = value

    @property
    def expiry_date(self):
        return self._expiry_date

    @expiry_date.setter
    def expiry_date(self, value):
        if not isinstance(value, datetime.datetime):
            raise ValueError('Order expiry date is not a datetime object.')
        self._expiry_date = value

    @property
    def option_type(self):
        return self._option_type

    @option_type.setter
    def option_type(self, value):
        if not isinstance(value, OptionType):
            raise ValueError('Order option type is not a option type object.')
        self._option_type = value.name

    @property
    def strike_price(self):
        return self._strike_price

    @strike_price.setter
    def strike_price(self, value):
        if not isinstance(value, int):
            raise ValueError('Order strike price is not an int object.')
        self._strike_price = value

    @property
    def msg(self):
        return self._msg

    @msg.setter
    def msg(self, value):
        self._msg = value

    @property
    def max_px(self):
        return self._max_px

    @max_px.setter
    def max_px(self, value):
        self._max_px = value

    @property
    def min_px(self):
        return self._min_px

    @min_px.setter
    def min_px(self, value):
        self._min_px = value


def main():
    # testing order class
    order_obj = Order()
    order_obj.symbol = 'NIFTY'
    order_obj.position = Position.LONG
    order_obj.entry_date = datetime.datetime(2020, 1, 1)
    order_obj.entry_price = 100
    order_obj.exit_date = datetime.datetime(2020, 3, 31)
    order_obj.exit_price = 125.50
    order_obj.quantity = 50
    order_obj.option_type = OptionType.CE
    order_obj.strike_price = 15250
    order_obj.expiry_date = datetime.datetime(2020, 3, 31)


if __name__ == '__main__':
    main()
